
NOTE:
- Your time complexities should be expressed in big-O notation and be in
  terms of n, where n is the size (i.e., number of items) of the queue

=========
ListQueue
=========

-------------+----------------------------------------------------------
             |                    time complexity
  operation  +-----------------+------------------+---------------------
             |    best case    |    worst case    |    average case
-------------+-----------------+------------------+---------------------
             |                 |                  |
   enqueue   |       O(1)      |       O(1)       |         O(1)
             |                 |                  |
-------------+-----------------+------------------+---------------------
             |                 |                  |
   dequeue   |       O(1)      |       O(1)       |         O(1)
             |                 |                  |
-------------+-----------------+------------------+---------------------

In these cases, the number of inputs does not change the time complexity
of the functions because there are no elements like loops or recursions
We do not need to traverse the list, because we have pointers that indicate
where to enqueue or dequeue an element, so no loops are necessary and regardless
of n, the pointers let the elements be added or removed in the same amount of 
steps. 

==========
ArrayQueue
==========

-------------+----------------------------------------------------------
             |                    time complexity
  operation  +-----------------+------------------+---------------------
             |    best case    |    worst case    |    average case
-------------+-----------------+------------------+---------------------
             |                 |                  |
   enqueue   |       O(1)      |       O(n)       |         O(n)
             |                 |                  |
-------------+-----------------+------------------+---------------------
             |                 |                  |
   dequeue   |       O(n)      |       O(n)       |         O(n)
             |                 |                  |
-------------+-----------------+------------------+---------------------

In these cases, the best case scenerio for the enqueue function would be 
if no resizing is required because the array never reaches beyond capacity.
If this is the case, since no loops or traversals are needed as well, the
time complexity is not dependant on n. In the average and worst case scenerios,
resizing would be required, and since realloc is dependant on the number of 
inputs. Dequeue involves moving all the elements using a loop in all cases,
and hence is dependant on n. 

==================
CircularArrayQueue
==================

-------------+----------------------------------------------------------
             |                    time complexity
  operation  +-----------------+------------------+---------------------
             |    best case    |    worst case    |    average case
-------------+-----------------+------------------+---------------------
             |                 |                  |
   enqueue   |      O(1)       |      O(n)        |       O(n)
             |                 |                  |
-------------+-----------------+------------------+---------------------
             |                 |                  |
   dequeue   |      O(1)       |       O(1)       |       O(1)
             |                 |                  |
-------------+-----------------+------------------+---------------------

In these cases, the best case scenerio for the enqueue function would be 
if no resizing is required because the array never reaches beyond capacity.
If this is the case, since no loops or traversals are needed as well, the
time complexity is not dependant on n. In the average and worst case scenerios,
resizing would be required, and since realloc is dependant on the number of 
inputs. There is a loop in certain cases where after more memory is allocated
the values are moved depending on where the frontIndex is in relation to the
size, so in the worst and average cases this loop would make the complexity 
dependant on n. Dequeue in this implementation doesn't require any form of looping, 
the value is just disregarded and the pointers moved, so in any scenerio the
complexity is O(1).

