// Algorithms to design electrical grids

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include "Graph.h"
#include "Place.h"
#include "PQ.h"

////////////////////////////////////////////////////////////////////////
// Your task

/**
 * Designs  a minimal cost electrical grid that will deliver electricity
 * from a power plant to all the given cities. Power lines must be built
 * between cities or between a city and a power plant.  Cost is directly
 * proportional to the total length of power lines used.
 * Assumes  that  numCities  is at least 1 (numCities is the size of the
 * cities array).
 * Stores the power lines that need to be built in the given  powerLines
 * array, and returns the number of power lines stored. Assumes that the
 * powerLines array is large enough to store all required power lines.
 */
int planGrid1(Place cities[], int numCities, Place powerPlant,
              PowerLine powerLines[]) {
    // New graph
    Graph new = GraphNew(numCities + 1);
    // Add the powerplant to the array of cities 
    cities[numCities] = powerPlant;
    // Loop to create a graph with all cities connected 
    for (int i = 0; i <= numCities; i++) {
        for (int j = 0; j <= numCities; j++) {
            if (i != j) {
            Edge newE;
            newE.v = i;
            newE.w = j;
            int x1 = cities[i].x;
            int x2 = cities[j].x;
            int y1 = cities[i].y;
            int y2 = cities[j].y;
            newE.weight = sqrt(pow(x1 - x2, 2)+pow(y1 - y2, 2));
            GraphInsertEdge(new, newE);
            }
        }
    }
    
    // Get the MST of the previous graph
    Graph optimal = GraphMST(new);
    // Add edges into powerlines array
    int numPowerlines = 0;
    for (int i = 0; i <= numCities; i++) {
        for (int j = 0; j <= numCities; j++) {
            if (GraphIsAdjacent(optimal, i, j) != 0) {
                PowerLine newPL;
                newPL.p1 = cities[i];
                newPL.p2 = cities[j];
                powerLines[numPowerlines] = newPL;
                GraphRemoveEdge(optimal, i, j);
                numPowerlines++;
            }
        }
    }
    GraphFree(optimal);
    return numPowerlines;
}

////////////////////////////////////////////////////////////////////////
// Optional task

/**
 * Designs  a minimal cost electrical grid that will deliver electricity
 * to all the given cities.  Power lines must be built between cities or
 * between a city and a power plant.  Cost is directly  proportional  to
 * the  total  length of power lines used.  Assume that each power plant
 * generates enough electricity to supply all cities, so not  all  power
 * plants need to be used.
 * Assumes  that  numCities and numPowerPlants are at least 1 (numCities
 * and numPowerPlants are the sizes of the cities and powerPlants arrays
 * respectively).
 * Stores the power lines that need to be built in the given  powerLines
 * array, and returns the number of power lines stored. Assumes that the
 * powerLines array is large enough to store all required power lines.
 */
int planGrid2(Place cities[], int numCities,
              Place powerPlants[], int numPowerPlants,
              PowerLine powerLines[]) {
    // TODO: Complete this function (optional)
    return 0;
}
