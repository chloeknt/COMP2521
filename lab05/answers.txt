
NOTE:
- Your time complexities should be expressed in big-O notation and be in
  terms of n, where n is the number of people who  have  been  added  to
  Friendbook.

===============
  FbUnfriend
===============

- Worst case time complexity: O(logn)

- Explanation: The worst case scenerio for this function is if the two names
are friends and need to be unfriended. This is because this function uses 
nametoID, which uses MapGet, which has a time complexity of log(n) for 
searching through the assumed AVL. 

===============
FbMutualFriends
===============

- Worst case time complexity: O(n)

- Explanation: The worst case scenerio for this function is if all friends are
mutual up to n-2, in any case every person needs to be looped through regardless.
The nametoID is only done twice at the beginning and thus the log(n) is overidden 
by the n complexity of the loop.

===============
 FbFriendRecs1
===============

- Worst case time complexity: O(n^2)

- Explanation: The worst case scenerio for this function is if n-2 people are
all mutual friends / In any case every person is looped through to check. The 
nametoID is only done once at the beginning and thus the log(n) is overidden 
by the n^2 complexity of the loops.

